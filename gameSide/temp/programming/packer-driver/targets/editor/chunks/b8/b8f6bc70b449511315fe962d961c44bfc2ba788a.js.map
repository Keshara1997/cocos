{"version":3,"sources":["file:///C:/Users/User/Documents/CocosGame/CoCos-Game-Login/login/assets/Script/webSocket/WebSocketManager.ts"],"names":["_decorator","EventTarget","ccclass","property","WebSocketManager","getInstance","_instance","constructor","_ws","_isConnected","_url","_protocol","eventTarget","globalThis","_webSocketManager","connectToServer","url","protocol","readyState","WebSocket","OPEN","console","log","_setupEventHandlers","error","onopen","_onWebSocketOpen","bind","onmessage","_onWebSocketMessage","onclose","_onWebSocketClose","onerror","_onWebSocketError","event","emit","data","message","JSON","parse","type","sendMessage","stringify","send","sendRawMessage","disconnect","close","isConnected","getConnectionState","CLOSED","reconnect","setTimeout"],"mappings":"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","sourcesContent":["import { _decorator, EventTarget } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('WebSocketManager')\r\nexport class WebSocketManager {\r\n    private static _instance: WebSocketManager = null;\r\n    private _ws: WebSocket = null;\r\n    private _isConnected: boolean = false;\r\n    private _url: string = \"ws://127.0.0.1:3000\";\r\n    private _protocol: string = \"echo-protocol\";\r\n    public eventTarget: EventTarget = new EventTarget();\r\n\r\n    // Singleton pattern\r\n    public static getInstance(): WebSocketManager {\r\n        if (WebSocketManager._instance === null) {\r\n            WebSocketManager._instance = new WebSocketManager();\r\n        }\r\n        return WebSocketManager._instance;\r\n    }\r\n\r\n    private constructor() {\r\n        // Set global reference for easy access\r\n        globalThis._webSocketManager = this;\r\n    }\r\n\r\n    // Connect to WebSocket server\r\n    public connectToServer(url?: string, protocol?: string): void {\r\n        if (url) this._url = url;\r\n        if (protocol) this._protocol = protocol;\r\n\r\n        if (this._ws && this._ws.readyState === WebSocket.OPEN) {\r\n            console.log(\"WebSocket is already connected\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            this._ws = new WebSocket(this._url, this._protocol);\r\n            this._setupEventHandlers();\r\n            console.log(`Attempting to connect to ${this._url}`);\r\n        } catch (error) {\r\n            console.error(\"Failed to create WebSocket connection:\", error);\r\n        }\r\n    }\r\n\r\n    // Setup WebSocket event handlers\r\n    private _setupEventHandlers(): void {\r\n        this._ws.onopen = this._onWebSocketOpen.bind(this);\r\n        this._ws.onmessage = this._onWebSocketMessage.bind(this);\r\n        this._ws.onclose = this._onWebSocketClose.bind(this);\r\n        this._ws.onerror = this._onWebSocketError.bind(this);\r\n    }\r\n\r\n    // WebSocket open event handler\r\n    private _onWebSocketOpen(event: Event): void {\r\n        console.log(\"WebSocket connection opened\");\r\n        this._isConnected = true;\r\n        this.eventTarget.emit(\"websocket_opened\", event);\r\n    }\r\n\r\n    // WebSocket message event handler\r\n    private _onWebSocketMessage(event: MessageEvent): void {\r\n        console.log(\"Received message from server:\", event.data);\r\n\r\n        try {\r\n            const message = JSON.parse(event.data);\r\n            console.log(\"Parsed message:\", message);\r\n\r\n            // Emit specific event based on message type\r\n            if (message.type) {\r\n                this.eventTarget.emit(message.type, message);\r\n            }\r\n\r\n            // Also emit a general message event\r\n            this.eventTarget.emit(\"websocket_message\", message);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error parsing message:\", error);\r\n            // Emit raw message if parsing fails\r\n            this.eventTarget.emit(\"websocket_raw_message\", event.data);\r\n        }\r\n    }\r\n\r\n    // WebSocket close event handler\r\n    private _onWebSocketClose(event: CloseEvent): void {\r\n        console.log(\"WebSocket connection closed\");\r\n        this._isConnected = false;\r\n        this.eventTarget.emit(\"websocket_closed\", event);\r\n    }\r\n\r\n    // WebSocket error event handler\r\n    private _onWebSocketError(event: Event): void {\r\n        console.error(\"WebSocket error:\", event);\r\n        this._isConnected = false;\r\n        this.eventTarget.emit(\"websocket_error\", event);\r\n    }\r\n\r\n    // Send message to server\r\n    public sendMessage(type: string, data?: any): boolean {\r\n        if (!this._ws || this._ws.readyState !== WebSocket.OPEN) {\r\n            console.error(\"WebSocket is not open. Cannot send message.\");\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            const message = JSON.stringify({ type, data });\r\n            this._ws.send(message);\r\n            console.log(\"Sent message to server:\", message);\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error sending message:\", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Send raw message to server\r\n    public sendRawMessage(message: string): boolean {\r\n        if (!this._ws || this._ws.readyState !== WebSocket.OPEN) {\r\n            console.error(\"WebSocket is not open. Cannot send message.\");\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            this._ws.send(message);\r\n            console.log(\"Sent raw message to server:\", message);\r\n            return true;\r\n        } catch (error) {\r\n            console.error(\"Error sending raw message:\", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Disconnect from server\r\n    public disconnect(): void {\r\n        if (this._ws) {\r\n            this._ws.close();\r\n            this._ws = null;\r\n            this._isConnected = false;\r\n            console.log(\"WebSocket disconnected\");\r\n        }\r\n    }\r\n\r\n    // Check connection status\r\n    public isConnected(): boolean {\r\n        return this._isConnected && this._ws && this._ws.readyState === WebSocket.OPEN;\r\n    }\r\n\r\n    // Get connection state\r\n    public getConnectionState(): number {\r\n        return this._ws ? this._ws.readyState : WebSocket.CLOSED;\r\n    }\r\n\r\n    // Reconnect to server\r\n    public reconnect(): void {\r\n        console.log(\"Reconnecting to server...\");\r\n        this.disconnect();\r\n        setTimeout(() => {\r\n            this.connectToServer();\r\n        }, 1000);\r\n    }\r\n} "]}