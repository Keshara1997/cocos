{"version":3,"sources":["file:///C:/Users/User/Documents/CocosGame/CoCos-Game-Login/login/assets/Script/webSocket/WebSocketUsageExample.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { _decorator, Component } from 'cc';\r\n// import { WebSocketManager } from './WebSocketManager';\r\n// const { ccclass, property } = _decorator;\r\n\r\n// /**\r\n//  * Example of how to use the WebSocketManager in any component\r\n//  */\r\n// @ccclass('WebSocketUsageExample')\r\n// export class WebSocketUsageExample extends Component {\r\n\r\n//     private webSocketManager: WebSocketManager;\r\n\r\n//     start() {\r\n//         this.setupWebSocketConnection();\r\n//     }\r\n\r\n//     private setupWebSocketConnection() {\r\n//         // Get the singleton instance\r\n//         this.webSocketManager = WebSocketManager.getInstance();\r\n\r\n//         // Setup event listeners\r\n//         this.webSocketManager.eventTarget.on(\"websocket_opened\", this.onConnected, this);\r\n//         this.webSocketManager.eventTarget.on(\"websocket_closed\", this.onDisconnected, this);\r\n//         this.webSocketManager.eventTarget.on(\"websocket_error\", this.onError, this);\r\n\r\n//         // Listen for specific message types\r\n//         this.webSocketManager.eventTarget.on(\"gameUpdate\", this.onGameUpdate, this);\r\n//         this.webSocketManager.eventTarget.on(\"chatMessage\", this.onChatMessage, this);\r\n\r\n//         // Connect to server (if not already connected)\r\n//         if (!this.webSocketManager.isConnected()) {\r\n//             this.webSocketManager.connectToServer();\r\n//         }\r\n//     }\r\n\r\n//     // Event handlers\r\n//     private onConnected(event: Event) {\r\n//         console.log(\"Connected to server in example component\");\r\n\r\n//         // Send a message when connected\r\n//         this.webSocketManager.sendMessage(\"joinRoom\", { roomId: \"12345\" });\r\n//     }\r\n\r\n//     private onDisconnected(event: CloseEvent) {\r\n//         console.log(\"Disconnected from server in example component\");\r\n//     }\r\n\r\n//     private onError(error: Event) {\r\n//         console.error(\"WebSocket error in example component:\", error);\r\n//     }\r\n\r\n//     private onGameUpdate(message: any) {\r\n//         console.log(\"Game update received:\", message);\r\n//         // Handle game update logic here\r\n//     }\r\n\r\n//     private onChatMessage(message: any) {\r\n//         console.log(\"Chat message received:\", message);\r\n//         // Handle chat message logic here\r\n//     }\r\n\r\n//     // Example methods for sending different types of messages\r\n//     public sendChatMessage(text: string) {\r\n//         this.webSocketManager.sendMessage(\"chatMessage\", {\r\n//             text: text,\r\n//             timestamp: Date.now()\r\n//         });\r\n//     }\r\n\r\n//     public joinRoom(roomId: string) {\r\n//         this.webSocketManager.sendMessage(\"joinRoom\", { roomId });\r\n//     }\r\n\r\n//     public leaveRoom() {\r\n//         this.webSocketManager.sendMessage(\"leaveRoom\", {});\r\n//     }\r\n\r\n//     public sendGameAction(action: string, data: any) {\r\n//         this.webSocketManager.sendMessage(\"gameAction\", {\r\n//             action: action,\r\n//             data: data\r\n//         });\r\n//     }\r\n\r\n//     // Cleanup when component is destroyed\r\n//     onDestroy() {\r\n//         if (this.webSocketManager) {\r\n//             // Remove event listeners\r\n//             this.webSocketManager.eventTarget.off(\"websocket_opened\", this.onConnected, this);\r\n//             this.webSocketManager.eventTarget.off(\"websocket_closed\", this.onDisconnected, this);\r\n//             this.webSocketManager.eventTarget.off(\"websocket_error\", this.onError, this);\r\n//             this.webSocketManager.eventTarget.off(\"gameUpdate\", this.onGameUpdate, this);\r\n//             this.webSocketManager.eventTarget.off(\"chatMessage\", this.onChatMessage, this);\r\n//         }\r\n//     }\r\n// } "]}