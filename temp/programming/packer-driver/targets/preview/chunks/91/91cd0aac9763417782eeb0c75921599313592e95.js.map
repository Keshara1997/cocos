{"version":3,"sources":["file:///C:/Users/User/Documents/CocosGame/CoCos-Game-Login/login/assets/Script/common/connectToDerver.ts"],"names":["connectToServer","EventTarget","eventTarget","globalThis","on","data","console","log","constructor","_ws","_connectToServer","ws","WebSocket","_loginScearnMgr","onopen","onmessage","result","message","JSON","parse","type","user","responseServerMessage","onclose","onerror","error","success","emit","_sendMessage","readyState","OPEN","stringify","send"],"mappings":";;;+EAWaA,e;;;;;;;;;AAXJC,MAAAA,W,OAAAA,W;;;;;;;;;AAIHC,MAAAA,W,GAAc,IAAID,WAAJ,E;AACpBE,MAAAA,UAAU,CAACD,WAAX,GAAyBA,WAAzB;AAEAA,MAAAA,WAAW,CAACE,EAAZ,CAAe,eAAf,EAAiCC,IAAD,IAAU;AACtCC,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,IAAjC;AACH,OAFD;;iCAIaL,e,GAAN,MAAMA,eAAN,CAAsB;AAIzBQ,QAAAA,WAAW,GAAG;AAAA,eAFNC,GAEM,GAFK,IAEL;;AACV,eAAKC,gBAAL;;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH;;AAGOG,QAAAA,gBAAgB,GAAG;AAEvB,cAAMC,EAAE,GAAG,IAAIC,SAAJ,CAAc,qBAAd,EAAqC,eAArC,CAAX;AAEA,eAAKH,GAAL,GAAWE,EAAX;AACAR,UAAAA,UAAU,CAACU,eAAX,GAA6B,IAA7B;;AAEAF,UAAAA,EAAE,CAACG,MAAH,GAAY,MAAM;AACdR,YAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EADc,CAEd;AAEH,WAJD;;AAMAI,UAAAA,EAAE,CAACI,SAAH,GAAgBC,MAAD,IAAY;AACvBV,YAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CS,MAAM,CAACX,IAApD;AAEAC,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBS,MAAtB;AACAV,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BS,MAAM,CAACX,IAAlC,EAJuB,CAMvB;;AACA,gBAAIY,OAAoC,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,CAACX,IAAlB,CAA3C,CAPuB,CASvB;AACA;;AAEAC,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBU,OAAvB;AACAX,YAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BU,OAAO,CAACG,IAApC,EAA0C,OAA1C,EAAmDH,OAAO,CAACI,IAA3D;AAKA,iBAAKC,qBAAL,CAA2BL,OAAO,CAACG,IAAnC,EAAyCH,OAAzC;AACH,WAnBD;;AAqBAN,UAAAA,EAAE,CAACY,OAAH,GAAa,MAAM;AACfjB,YAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACH,WAFD;;AAGAI,UAAAA,EAAE,CAACa,OAAH,GAAcC,KAAD,IAAW;AACpBnB,YAAAA,OAAO,CAACmB,KAAR,CAAc,kBAAd,EAAkCA,KAAlC;AACH,WAFD;AAIH;;AAGMH,QAAAA,qBAAqB,CAACF,IAAD,EAAOH,OAAP,EAAgB;AACxCX,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8Ba,IAA9B;AACAd,UAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBU,OAAO,CAACS,OAAhC;AACApB,UAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCU,OAArC;;AAEA,cAAIG,IAAI,KAAK,eAAT,IAA4BH,OAAO,CAACS,OAAxC,EAAiD;AAC7CvB,YAAAA,UAAU,CAACD,WAAX,CAAuByB,IAAvB,CAA4B,eAA5B,EAA6CV,OAA7C;AACH;;AAEDd,UAAAA,UAAU,CAACD,WAAX,CAAuByB,IAAvB,CAA4BP,IAA5B,EAAkCH,OAAlC;AACH;;AAIOW,QAAAA,YAAY,CAACR,IAAD,EAAef,IAAf,EAA0B;AAC1C,cAAI,KAAKI,GAAL,IAAY,KAAKA,GAAL,CAASoB,UAAT,KAAwBjB,SAAS,CAACkB,IAAlD,EAAwD;AACpD,gBAAMb,OAAO,GAAGC,IAAI,CAACa,SAAL,CAAe;AAAEX,cAAAA,IAAF;AAAQf,cAAAA;AAAR,aAAf,CAAhB;;AACA,iBAAKI,GAAL,CAASuB,IAAT,CAAcf,OAAd;;AACAX,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCU,OAAvC;AACH,WAJD,MAIO;AACHX,YAAAA,OAAO,CAACmB,KAAR,CAAc,6CAAd;AACH;AAGJ;;AA9EwB,O","sourcesContent":["import { EventTarget } from \"cc\";   \r\n\r\n\r\n\r\nconst eventTarget = new EventTarget();\r\nglobalThis.eventTarget = eventTarget;\r\n\r\neventTarget.on(\"login_success\", (data) => {\r\n    console.log(\"Login successful:\", data);\r\n});\r\n\r\nexport class connectToServer {\r\n\r\n    private _ws: any = null;\r\n\r\n    constructor() {\r\n        this._connectToServer();\r\n        console.log(\"connectToServer initialized\");\r\n    }\r\n\r\n    \r\n    private _connectToServer() {\r\n\r\n        const ws = new WebSocket(\"ws://127.0.0.1:3000\", \"echo-protocol\");\r\n\r\n        this._ws = ws;\r\n        globalThis._loginScearnMgr = this;\r\n\r\n        ws.onopen = () => {\r\n            console.log(\"WebSocket connection opened\");\r\n            // ws.send('{\"type\":\"login\",\"username\":\"testUser\",\"password\":\"testPass\"}');\r\n\r\n        }\r\n\r\n        ws.onmessage = (result) => {\r\n            console.log(\"Received message from server:\", result.data);\r\n\r\n            console.log('result', result);\r\n            console.log('result.data', result.data);\r\n\r\n            // Parse the incoming message\r\n            let message: { type: string, user: any } = JSON.parse(result.data);\r\n\r\n            // let type = JSON.parse(result.data).type;\r\n            // let data = JSON.parse(result.data).data;\r\n\r\n            console.log('message', message);\r\n            console.log(\"Parsed type:\", message.type, \"data:\", message.user);\r\n\r\n\r\n\r\n\r\n            this.responseServerMessage(message.type, message);\r\n        }\r\n\r\n        ws.onclose = () => {\r\n            console.log(\"WebSocket connection closed\");\r\n        }\r\n        ws.onerror = (error) => {\r\n            console.error(\"WebSocket error:\", error);\r\n        }\r\n\r\n    }\r\n\r\n    \r\n    public responseServerMessage(type, message) {\r\n        console.log('response type:', type);\r\n        console.log('success:', message.success);\r\n        console.log(\"Response from server:\", message);\r\n\r\n        if (type === \"loginResponse\" && message.success) {\r\n            globalThis.eventTarget.emit(\"login_success\", message);\r\n        }\r\n\r\n        globalThis.eventTarget.emit(type, message);\r\n    }\r\n\r\n\r\n\r\n    private _sendMessage(type: string, data: any) {\r\n        if (this._ws && this._ws.readyState === WebSocket.OPEN) {\r\n            const message = JSON.stringify({ type, data });\r\n            this._ws.send(message);\r\n            console.log(\"Sent message to server:\", message);\r\n        } else {\r\n            console.error(\"WebSocket is not open. Cannot send message.\");\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n"]}