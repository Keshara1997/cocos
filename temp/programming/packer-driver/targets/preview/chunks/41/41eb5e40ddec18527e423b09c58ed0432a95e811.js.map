{"version":3,"sources":["file:///C:/Users/User/Documents/CocosGame/CoCos-Game-Login/login/assets/scripts/controllers/PlayerController.ts"],"names":["_decorator","Component","RigidBody2D","input","Input","KeyCode","Vec2","Animation","Collider2D","Contact2DType","Prefab","instantiate","ccclass","property","PlayerController","isGrounded","moveDirection","facingDirection","isOnJumper","start","on","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","collider","getComponent","BEGIN_CONTACT","onBeginContact","END_CONTACT","onEndContact","console","warn","event","keyCode","KEY_A","ARROW_LEFT","animationComponent","play","KEY_D","ARROW_RIGHT","playAnimation","KEY_W","log","jump","SPACE","throwBomb","vel","rigidBody","linearVelocity","x","update","deltaTime","moveSpeed","node","setScale","jumpPower","jumpForce","superJumpMultiplier","applyLinearImpulseToCenter","jumperBoost","boostForce","bomb","Bomb_Prefab","parent","pos","getPosition","y","setPosition","bombRigidBody","impulseX","impulseY","animName","selfCollider","otherCollider","name","group","contact"],"mappings":"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","sourcesContent":["// File: assets/scripts/controllers/PlayerController.ts\r\nimport {\r\n  _decorator,\r\n  Component,\r\n  Node,\r\n  RigidBody2D,\r\n  input,\r\n  Input,\r\n  EventKeyboard,\r\n  KeyCode,\r\n  Vec2,\r\n  Animation,\r\n  Collider2D,\r\n  Contact2DType,\r\n  IPhysics2DContact,\r\n  Prefab,\r\n  instantiate,\r\n} from \"cc\";\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass(\"PlayerController\")\r\nexport class PlayerController extends Component {\r\n  @property(RigidBody2D)\r\n  rigidBody: RigidBody2D = null!;\r\n\r\n  @property(Animation)\r\n  animationComponent: Animation = null!;\r\n\r\n  @property(Prefab)\r\n  Bomb_Prefab: Prefab = null!;\r\n\r\n  @property\r\n  moveSpeed: number = 2;\r\n\r\n  @property\r\n  jumpForce: number = 2000;\r\n\r\n  @property\r\n  superJumpMultiplier: number = 1.5; // Multiplier for enhanced jump on jumper\r\n\r\n  private isGrounded: boolean = false;\r\n  private moveDirection: number = 0;\r\n  private facingDirection: number = 1;\r\n  private isOnJumper: boolean = false; // Track if player is on a jumper\r\n\r\n  start() {\r\n    input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);\r\n    input.on(Input.EventType.KEY_UP, this.onKeyUp, this);\r\n    const collider = this.getComponent(Collider2D);\r\n    if (collider) {\r\n      collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n      collider.on(Contact2DType.END_CONTACT, this.onEndContact, this);\r\n    } else {\r\n      console.warn(\"PlayerController: no Collider2D found on node\");\r\n    }\r\n  }\r\n\r\n  onKeyDown(event: EventKeyboard) {\r\n    switch (event.keyCode) {\r\n      case KeyCode.KEY_A:\r\n      case KeyCode.ARROW_LEFT:\r\n        this.moveDirection = -1;\r\n        this.facingDirection = -1;\r\n        this.animationComponent.play(\"player_run\");\r\n        break;\r\n      case KeyCode.KEY_D:\r\n      case KeyCode.ARROW_RIGHT:\r\n        this.moveDirection = 1;\r\n        this.facingDirection = 1;\r\n        this.playAnimation(\"player_run\");\r\n        break;\r\n      case KeyCode.KEY_W:\r\n        if (this.isGrounded) {\r\n          console.log(\"Jump key pressed\");\r\n          console.log(\"isGrounded:\", this.isGrounded);\r\n          this.jump();\r\n        }\r\n        break;\r\n      case KeyCode.SPACE:\r\n        this.throwBomb();\r\n        break;\r\n    }\r\n  }\r\n\r\n  onKeyUp(event: EventKeyboard) {\r\n    console.log(`Key released: ${event.keyCode}`);\r\n    if (\r\n      event.keyCode === KeyCode.KEY_A ||\r\n      event.keyCode === KeyCode.ARROW_LEFT ||\r\n      event.keyCode === KeyCode.KEY_D ||\r\n      event.keyCode === KeyCode.ARROW_RIGHT\r\n    ) {\r\n      this.moveDirection = 0;\r\n      this.playAnimation(\"player_idle\");\r\n      const vel = this.rigidBody.linearVelocity;\r\n      vel.x = 0;\r\n      this.rigidBody.linearVelocity = vel;\r\n    }\r\n  }\r\n\r\n  update(deltaTime: number) {\r\n    const vel = this.rigidBody.linearVelocity;\r\n    if (this.moveDirection !== 0) {\r\n      vel.x = this.moveDirection * this.moveSpeed;\r\n      this.rigidBody.linearVelocity = vel;\r\n      this.node.setScale(this.facingDirection, 1);\r\n    } else {\r\n      if (vel.x !== 0) {\r\n        vel.x = 0;\r\n        this.rigidBody.linearVelocity = vel;\r\n      }\r\n    }\r\n  }\r\n\r\n  jump() {\r\n    let jumpPower = this.jumpForce;\r\n    \r\n    // If player is on a jumper and manually jumps, give extra boost\r\n    if (this.isOnJumper) {\r\n      jumpPower = this.jumpForce * this.superJumpMultiplier;\r\n      console.log(\"Super jump activated! Jump power:\", jumpPower);\r\n    }\r\n    \r\n    this.rigidBody.applyLinearImpulseToCenter(\r\n      new Vec2(0, jumpPower),\r\n      true\r\n    );\r\n    this.playAnimation(\"player_jump\");\r\n    this.isGrounded = false;\r\n    this.isOnJumper = false; // Reset jumper state after using it\r\n  }\r\n\r\n  // Method called by JumperController when player lands on jumper\r\n  jumperBoost(boostForce: number) {\r\n    console.log(\"Jumper boost applied! Force:\", boostForce);\r\n    \r\n    // Apply the jumper boost force\r\n    this.rigidBody.applyLinearImpulseToCenter(\r\n      new Vec2(0, boostForce),\r\n      true\r\n    );\r\n    \r\n    this.playAnimation(\"player_jump\");\r\n    this.isGrounded = false;\r\n    this.isOnJumper = false; // Reset since we just used the jumper\r\n  }\r\n\r\n  throwBomb() {\r\n    this.playAnimation(\"player_throwBomb\");\r\n    const bomb = instantiate(this.Bomb_Prefab);\r\n    bomb.parent = this.node.parent;\r\n    const pos = this.node.getPosition();\r\n    pos.x += 30 * this.facingDirection;\r\n    pos.y += 10;\r\n    bomb.setPosition(pos);\r\n\r\n    const bombRigidBody = bomb.getComponent(RigidBody2D);\r\n    if (bombRigidBody) {\r\n      const impulseX = 10 * this.facingDirection;\r\n      const impulseY = 5;\r\n      bombRigidBody.applyLinearImpulseToCenter(\r\n        new Vec2(impulseX, impulseY),\r\n        true\r\n      );\r\n    }\r\n  }\r\n\r\n  playAnimation(animName: string) {\r\n    if (this.animationComponent) {\r\n      this.animationComponent.play(animName);\r\n    }\r\n  }\r\n\r\n  onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D) {\r\n    console.log(\r\n      `Begin contact:1234 ${selfCollider.node.name} ↔ ${otherCollider.group}`\r\n    );\r\n    \r\n    // Ground detection\r\n    if (otherCollider.group === 2) {\r\n      console.log(\"Ground contact detected\");\r\n      this.isGrounded = true;\r\n      console.log(\"isGrounded:\", this.isGrounded);\r\n      if (this.moveDirection === 0) {\r\n        this.playAnimation(\"player_idle\");\r\n      }\r\n    }\r\n    \r\n    // Jumper detection\r\n    if (otherCollider.group === 32) {\r\n      console.log(\"Jumper contact detected\");\r\n      this.isGrounded = true;\r\n      this.isOnJumper = true;\r\n      console.log(\"isOnJumper:\", this.isOnJumper);\r\n    }\r\n    \r\n    // Note: Coin collection is now handled by CoinController\r\n    // This keeps the code cleaner and more modular\r\n  }\r\n\r\n  private onEndContact(\r\n    selfCollider: Collider2D,\r\n    otherCollider: Collider2D,\r\n    contact: IPhysics2DContact\r\n  ) {\r\n    if (otherCollider.group === 2) {\r\n      this.isGrounded = false;\r\n      console.log(\"Left ground, isGrounded:\", this.isGrounded);\r\n    }\r\n    \r\n    if (otherCollider.group === 10) {\r\n      // Don't immediately set isOnJumper to false here\r\n      // Let the jump methods handle the reset\r\n      console.log(\"Left jumper contact\");\r\n    }\r\n  }\r\n}"]}