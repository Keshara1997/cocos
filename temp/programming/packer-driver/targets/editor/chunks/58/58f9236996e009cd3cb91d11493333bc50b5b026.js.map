{"version":3,"sources":["file:///C:/Users/User/Documents/CocosGame/CoCos-Game-Login/login/assets/Script/WebSocketUsageExample.ts"],"names":["_decorator","Component","WebSocketManager","ccclass","property","WebSocketUsageExample","webSocketManager","start","setupWebSocketConnection","getInstance","eventTarget","on","onConnected","onDisconnected","onError","onGameUpdate","onChatMessage","isConnected","connectToServer","event","console","log","sendMessage","roomId","error","message","sendChatMessage","text","timestamp","Date","now","joinRoom","leaveRoom","sendGameAction","action","data","onDestroy","off"],"mappings":"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","sourcesContent":["import { _decorator, Component } from 'cc';\r\nimport { WebSocketManager } from './WebSocketManager';\r\nconst { ccclass, property } = _decorator;\r\n\r\n/**\r\n * Example of how to use the WebSocketManager in any component\r\n */\r\n@ccclass('WebSocketUsageExample')\r\nexport class WebSocketUsageExample extends Component {\r\n\r\n    private webSocketManager: WebSocketManager;\r\n\r\n    start() {\r\n        this.setupWebSocketConnection();\r\n    }\r\n\r\n    private setupWebSocketConnection() {\r\n        // Get the singleton instance\r\n        this.webSocketManager = WebSocketManager.getInstance();\r\n\r\n        // Setup event listeners\r\n        this.webSocketManager.eventTarget.on(\"websocket_opened\", this.onConnected, this);\r\n        this.webSocketManager.eventTarget.on(\"websocket_closed\", this.onDisconnected, this);\r\n        this.webSocketManager.eventTarget.on(\"websocket_error\", this.onError, this);\r\n\r\n        // Listen for specific message types\r\n        this.webSocketManager.eventTarget.on(\"gameUpdate\", this.onGameUpdate, this);\r\n        this.webSocketManager.eventTarget.on(\"chatMessage\", this.onChatMessage, this);\r\n\r\n        // Connect to server (if not already connected)\r\n        if (!this.webSocketManager.isConnected()) {\r\n            this.webSocketManager.connectToServer();\r\n        }\r\n    }\r\n\r\n    // Event handlers\r\n    private onConnected(event: Event) {\r\n        console.log(\"Connected to server in example component\");\r\n\r\n        // Send a message when connected\r\n        this.webSocketManager.sendMessage(\"joinRoom\", { roomId: \"12345\" });\r\n    }\r\n\r\n    private onDisconnected(event: CloseEvent) {\r\n        console.log(\"Disconnected from server in example component\");\r\n    }\r\n\r\n    private onError(error: Event) {\r\n        console.error(\"WebSocket error in example component:\", error);\r\n    }\r\n\r\n    private onGameUpdate(message: any) {\r\n        console.log(\"Game update received:\", message);\r\n        // Handle game update logic here\r\n    }\r\n\r\n    private onChatMessage(message: any) {\r\n        console.log(\"Chat message received:\", message);\r\n        // Handle chat message logic here\r\n    }\r\n\r\n    // Example methods for sending different types of messages\r\n    public sendChatMessage(text: string) {\r\n        this.webSocketManager.sendMessage(\"chatMessage\", {\r\n            text: text,\r\n            timestamp: Date.now()\r\n        });\r\n    }\r\n\r\n    public joinRoom(roomId: string) {\r\n        this.webSocketManager.sendMessage(\"joinRoom\", { roomId });\r\n    }\r\n\r\n    public leaveRoom() {\r\n        this.webSocketManager.sendMessage(\"leaveRoom\", {});\r\n    }\r\n\r\n    public sendGameAction(action: string, data: any) {\r\n        this.webSocketManager.sendMessage(\"gameAction\", {\r\n            action: action,\r\n            data: data\r\n        });\r\n    }\r\n\r\n    // Cleanup when component is destroyed\r\n    onDestroy() {\r\n        if (this.webSocketManager) {\r\n            // Remove event listeners\r\n            this.webSocketManager.eventTarget.off(\"websocket_opened\", this.onConnected, this);\r\n            this.webSocketManager.eventTarget.off(\"websocket_closed\", this.onDisconnected, this);\r\n            this.webSocketManager.eventTarget.off(\"websocket_error\", this.onError, this);\r\n            this.webSocketManager.eventTarget.off(\"gameUpdate\", this.onGameUpdate, this);\r\n            this.webSocketManager.eventTarget.off(\"chatMessage\", this.onChatMessage, this);\r\n        }\r\n    }\r\n} "]}