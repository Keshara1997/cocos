{"version":3,"sources":["file:///C:/Users/User/Documents/CocosGame/bikibili/login/assets/Script/loginClient.ts"],"names":["_decorator","Component","EventTarget","ccclass","property","eventTarget","globalThis","on","data","console","log","loginClient","_ws","start","_init","update","deltaTime","_connectToServer","ws","WebSocket","_loginScearnMgr","onopen","onmessage","result","message","JSON","parse","type","user","responseServerMessage","onclose","onerror","error","success","emit","_sendMessage","readyState","OPEN","stringify","send"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, EventTarget } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n\r\n\r\nconst eventTarget = new EventTarget();\r\nglobalThis.eventTarget = eventTarget;\r\n\r\neventTarget.on(\"login_success\", (data) => {\r\n    console.log(\"Login successful:\", data);\r\n});\r\n\r\n@ccclass('loginClient')\r\nexport class loginClient extends Component {\r\n\r\n    private _ws: any = null;\r\n\r\n\r\n\r\n\r\n\r\n    start() {\r\n        this._init();\r\n        console.log(\"loginClient start\");\r\n\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n\r\n    }\r\n\r\n    private _init() {\r\n        this._connectToServer();\r\n        console.log(\"loginClient init\");\r\n    }\r\n\r\n\r\n    private _connectToServer() {\r\n\r\n        const ws = new WebSocket(\"ws://127.0.0.1:3000\", \"echo-protocol\");\r\n\r\n        this._ws = ws;\r\n        globalThis._loginScearnMgr = this;\r\n\r\n        ws.onopen = () => {\r\n            console.log(\"WebSocket connection opened\");\r\n            // ws.send('{\"type\":\"login\",\"username\":\"testUser\",\"password\":\"testPass\"}');\r\n\r\n        }\r\n\r\n        ws.onmessage = (result) => {\r\n            console.log(\"Received message from server:\", result.data);\r\n\r\n            console.log('result', result);\r\n\r\n            // Parse the incoming message\r\n            let message: { type: string, user: any } = JSON.parse(result.data);\r\n\r\n            // let type = JSON.parse(result.data).type;\r\n            // let data = JSON.parse(result.data).data;\r\n\r\n            console.log('message', message);\r\n            console.log(\"Parsed type:\", message.type, \"data:\", message.user);\r\n\r\n\r\n\r\n\r\n            this.responseServerMessage(message.type, message);\r\n        }\r\n\r\n        ws.onclose = () => {\r\n            console.log(\"WebSocket connection closed\");\r\n        }\r\n        ws.onerror = (error) => {\r\n            console.error(\"WebSocket error:\", error);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public responseServerMessage(type, message) {\r\n        console.log('response type:', type);\r\n        console.log('success:', message.success);\r\n        console.log(\"Response from server:\", message);\r\n\r\n        if (type === \"loginResponse\" && message.success) {\r\n            globalThis.eventTarget.emit(\"login_success\", message);\r\n        }\r\n\r\n        globalThis.eventTarget.emit(type, message);\r\n    }\r\n\r\n\r\n\r\n    private _sendMessage(type: string, data: any) {\r\n        if (this._ws && this._ws.readyState === WebSocket.OPEN) {\r\n            const message = JSON.stringify({ type, data });\r\n            this._ws.send(message);\r\n            console.log(\"Sent message to server:\", message);\r\n        } else {\r\n            console.error(\"WebSocket is not open. Cannot send message.\");\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\n"]}